getwdd()
getwd()
clear()
clr()
library(datasets)
data("mtcars")
head(mtcars)
library(ggplots)
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
head(mtcars)
colnames(mtcars)
?mtcars
g <- ggplot(mtcars, aes(x = mtcars$mpg, y = mtcars$am), colour = mtcars$am)
g <- g + geom_point()
g
g <- ggplot(mtcars, aes(x = mtcars$mpg, y = mtcars$am))
g <- g + geom_point()
g
g <- ggplot(mtcars, aes(x = mtcars$mpg, y = mtcars$am))
g <- g + geom_point(colour= "red")
g
g <- ggplot(mtcars, aes(x = mtcars$am, y = mtcars$am))
g <- g + geom_point(colour= "red")
g
dev.off()
plot(mtcars$mpg~mtcars$am)
plot(mtcars$mpg~mtcars$am, colour = "red")
g <- ggplot(mtcars, aes(x = mtcars$am, y = mtcars$mpg))
g <- g + geom_point(colour= "red")
g
g <- ggplot(mtcars, aes(x = mtcars$am, y = mtcars$mpg), colour = mtcars$am)
g <- g + geom_point()
g
qplot(am, mpg, data = mtcars, color= mtcars$am)
fit1 <- lm(mtcars$mpg~mtcars$am)
summary(fit1)
fit2 <- glm(mtcars$mpg~mtcars$am, family = "binomial")
head(mtcars)
fit1 <- lm(mpg~cyl+disp+hp+drat+wt+qsec+vs+am+gear+carb)
fit1 <- lm(mpg~cyl+disp+hp+drat+wt+qsec+vs+am+gear+carb, data = mtcars)
coef(fit1)
summary(fit1)
View(mtcars)
qplot(cyl, mpg, data = mtcars)
qplot(disp, mpg, data = mtcars)
qplot(disp, mpg, data = mtcars, color = cyl)
library(datasets)
library(ggplot2)
data("mtcars")
data("mtcars")
coplot(mpg ~ wt | as.factor(am), data = mtcars,
rows = 1)
head(mtcars)
library(datasets)
library(ggplot2)
mtcars$cyl <- factor(mtcars$cyl)
mtcars$vs <- factor(mtcars$vs)
mtcars$carb <- factor(mtcars$carb)
mtcars$gear <- factor(mtcars$gear)
mtcars$am <- factor(mtcars$am, labels = c("Automatic", "Manual"))
library(dplyr)
install.packages("dplyr")
pairs(mtcars)
library(dplyr)
summarise(mtcars$mpg,group_by(mtcars$am), mean)
summarize(mtcars$mpg,group_by(mtcars$am), mean)
summarise(group_by(mtcars, am), mpg = mean(mpg))
aggregate(mpg~am, data = mtcars)
aggregate(mpg~am, data = mtcars, mean)
boxplot(mpg~am, data = mtcars)
plot(fit2)
library(datasets)
library(ggplot2)
library(dplyr)
data("mtcars")
mtcars$cyl <- factor(mtcars$cyl)
mtcars$vs <- factor(mtcars$vs)
mtcars$carb <- factor(mtcars$carb)
mtcars$gear <- factor(mtcars$gear)
mtcars$am <- factor(mtcars$am, labels = c("Automatic", "Manual"))
auto_mpg <- mtcars[mtcars$am == "Automatic"]
manual_mpg <- mtcars[mtcars$am== "Manual"]
auto_mpg <- mtcars[mtcars$am == "Automatic",]
manual_mpg <- mtcars[mtcars$am== "Manual",]
t.test(auto_mpg, manual_mpg)
t.test(auto_mpg$mpg, manual_mpg$mpg)
fit1 <- lm(mpg~am, data = mtcars)
fit2 <- lm(mpg~am + disp + hp + wt, data = mtcars)
summary(fit1)
summary(fit2)
anova(fit1, fit2)
plot(fit2)
dev.off()
par(mfrow = c(2,2))
plot(fit2)
dev.off()
cor(mtcars)
cor(mtcars, method = "spearman")
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
install.packages("AppliedPredictiveModeling")
install.packages("caret")
library(caret)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
data("concrete")
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
head(training)
qqplot(training)
pairs(training)
plot(training$CompressiveStrength, colour = training$FlyAsh)
plot(training$CompressiveStrength, color = training$FlyAsh)
warnings()
library(ggplot2)
qplot(training$CompressiveStrength, colour = training$FlyAsh)
dev.off()
head(training)
str(training$Superplasticizer)
summary(training$Superplasticizer)
hist(training$Superplasticizer)
hist(log(training$Superplasticizer+1))
set.seed(3433)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
head(training)
trainingIL <- training[,grep("^IL", names(training))]
procTrain <- preProcess(trainingIL, method = "pca", thresh = 0.9 )
procTrain
dev.off()
library(datasets)
library(ggplot2)
library(dplyr)
data("mtcars")
mtcars$cyl <- factor(mtcars$cyl)
mtcars$vs <- factor(mtcars$vs)
mtcars$carb <- factor(mtcars$carb)
mtcars$gear <- factor(mtcars$gear)
mtcars$am <- factor(mtcars$am, labels = c("Automatic", "Manual"))
summarise(group_by(mtcars, am), mpg = mean(mpg))
?mtcars
auto_mpg <- mtcars[mtcars$am == "Automatic",]
manual_mpg <- mtcars[mtcars$am== "Manual",]
t.test(auto_mpg$mpg, manual_mpg$mpg)
fit1 <- lm(mpg~am, data = mtcars)
summary(fit1)
fit2 <- lm(mpg~am + disp + hp + wt, data = mtcars)
summary(fit2)
anova(fit1, fit2)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
head(segmentationOriginal)
colnames(segmentationOriginal)
intrain <- createDataPartition(y = segmentationOriginal$Case, p = 0.7, list = FALSE)
train <- segmentationOriginal[intrain, ]
test <- segmentationOriginal[-intrain,]
fit <- train(Case~., data = train, method = "rpart")
install.packages("e1071")
fit <- train(Case~., data = train, method = "rpart")
library(pgmm)
data(olive)
olive = olive[,-1]
install.packages("pgmm")
library(pgmm)
data(olive)
olive = olive[,-1]
newdata = as.data.frame(t(colMeans(olive)))
colnames(olive)
fit2 <- train(Area~., data = olive, method = "rpart")
predict(fit2, newdata = newdata)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
install.packages("ElemStatLearn")
colnames(tracingState())
colnames(trainSA)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
colnames(trainSA)
fit3 <- train(chd~age+alchohol+obesity+tobacco+typea+ldl, data = trainSA, method = "glm", family = "binomial")
fit3 <- train(chd~age+alcohol+obesity+tobacco+typea+ldl, data = trainSA, method = "glm", family = "binomial")
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass()
missClass
missClass(testSA$chd)
missClass(fit3,testSA$chd)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
library(rattle)
install.packages("rattle")
install.packages("rattle")
library(rattle)
library(rpart.plot)
install.packages("rpart")
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
colnames(vowel.train)
library(caret)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test)
fit1 <- train(y~., data = vowel.train, method = "rf")
fit2 <- train(y~., data = vowel.train, method = "gbm")
fit2 <- train(y~., data = vowel.train, method = "lda")
?plot.enet
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
?plot.enet
install.packages('elasticnet')
?plot.enet
?plot.enet()
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[inTrain, ]
testing = concrete[-inTrain, ]
set.seed(325)
library(e1071)
mod_svm <- svm(CompressiveStrength ~ ., data = training)
pred_svm <- predict(mod_svm, testing)
accuracy(pred_svm, testing$CompressiveStrength)
library(lubridate)  # For year() function below
dat = read.csv("/Users/cheyu/Documents/MOOC/MachineLearning/gaData.csv")
training = dat[year(dat$date) < 2012, ]
testing = dat[(year(dat$date)) > 2011, ]
tstrain = ts(training$visitsTumblr)
library(forecast)
install.packages("lubridate")
install.packages("lubridate")
install.packages("lubridate")
install.packages("lubridate")
install.packages("forecast")
library(e1071)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[inTrain, ]
testing = concrete[-inTrain, ]
library(caret)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[inTrain, ]
testing = concrete[-inTrain, ]
set.seed(325)
library(e1071)
mod_svm <- svm(CompressiveStrength ~ ., data = training)
pred_svm <- predict(mod_svm, testing)
accuracy(pred_svm, testing$CompressiveStrength)
library(forecast)
set.seed(325)
library(e1071)
mod_svm <- svm(CompressiveStrength ~ ., data = training)
pred_svm <- predict(mod_svm, testing)
accuracy(pred_svm, testing$CompressiveStrength)
getwd()
pmlTrain <- read.csv('pml-train')
pmlTest <- read.csv('pml-test')
pmlTrain <- read.csv('pml-train.csv')
pmlTest <- read.csv('pml-test.csv')
ls
pmlTrain <- read.csv('pml-training.csv')
pmlTest <- read.csv('pml-testing.csv')
head(pmlTrain)
names(pmlTest)
path <- "~/coursera/Titanic"
Titanic <- read.csv('./Titanic/train.csv')
Titanic <- read.csv('./coursera/Titanic/train.csv')
names(Titanic)
plot(Titanic)
sapply(Titanic, is.na)
sapply(Titanic, sum(is.na))
warnings()
sapply(sapply(Titanic, is.na), sum)
sum(is.na(Titanic$Age))
setwd('~/Documents')
pmlTrain <- read.csv('pml-training.csv')
pmlTest <- read.csv('pml-testing.csv')
getwd()
getwd()
pmlTrain <- read.csv('pml-training.csv')
pmlTest <- read.csv('pml-testing.csv')
str(pmlTest)
head(pmlTest)
head(pmlTrain)
str(pmlTrain)
sum(is.na(pmlTrain$roll_belt))
is.na(pmlTrain$roll_belt)
sum(is.na(pmlTrain$max_roll_belt))
19622 * 0.9
pmlTrain <- read.csv('pml-training.csv')
pmlTest <- read.csv('pml-testing.csv')
dim(is.na(pmlTrain))
str(is.na(pmlTrain))
head(is.na(pmlTrain))
colSums(pmlTest)
colSums(is.na(pmlTrain) > 0.9)
newTrain <- which(colSums(is.na(pmlTrain) > .9 | pmlTrain == ""))
newTrain <- which(colSums(is.na(pmlTrain)  | pmlTrain == "") > dim(pmlTrain)[1]*.9)
dim(newTrain)
View(newTrain)
pmlTrain2 <- pmlTrain[, -incoltTrain]
pmlTrain2 <- pmlTrain2[-c(1:7),]
pmlTest2 <- pmlTest[, -incoltTest]
pmlTest2 <- pmlTest2[-c(1:7),]
incoltTrain <- which(colSums(is.na(pmlTrain)  | pmlTrain == "") > dim(pmlTrain)[1]*.9)
incolTest <- which(colSums(is.na(pmlTest)  | pmlTest == "") > dim(pmlTest)[1]*.9)
pmlTrain2 <- pmlTrain[, -incoltTrain]
pmlTrain2 <- pmlTrain2[-c(1:7),]
pmlTest2 <- pmlTest[, -incoltTest]
pmlTest2 <- pmlTest2[-c(1:7),]
incolTrain <- which(colSums(is.na(pmlTrain)  | pmlTrain == "") >
dim(pmlTrain)[1]*.9)
incolTest <- which(colSums(is.na(pmlTest)  | pmlTest == "") >
dim(pmlTest)[1]*.9)
pmlTrain2 <- pmlTrain[, -incolTrain]
pmlTrain2 <- pmlTrain2[-c(1:7),]
pmlTest2 <- pmlTest[, -incolTest]
pmlTest2 <- pmlTest2[-c(1:7),]
str(pmlTrain2)
pmlTrain2 <- pmlTrain[, -incolTrain]
pmlTrain2 <- pmlTrain2[-c(1:7),]
pmlTest2 <- pmlTest[, -incolTest]
pmlTest2 <- pmlTest2[, -c(1:7)]
str(pmlTrain2)
pmlTrain2 <- pmlTrain[, -incolTrain]
pmlTrain2 <- pmlTrain2[, -c(1:7)]
pmlTest2 <- pmlTest[, -incolTest]
pmlTest2 <- pmlTest2[, -c(1:7)]
str(pmlTrain2)
library(caret)
library(rattle)
set.seed(12345)
intrain <- createDataPartition(pmlTrain2, .7, list = FALSE)
trainData <- pmlTrain2[intrain, ]
testData <- pmlTrain2[-intrain, ]
intrain <- createDataPartition(pmlTrain2$classe , .75, list = FALSE)
trainData <- pmlTrain2[intrain, ]
testData <- pmlTrain2[-intrain, ]
intrain <- createDataPartition(pmlTrain2$classe , p=0.75, list = FALSE)
trainData <- pmlTrain2[intrain, ]
testData <- pmlTrain2[-intrain, ]
length(trainData)
dim(trainData)
dim(testData)
modelTree <- train(classe~., data = trainData,
trcontrol = trainControl(method = "cv", number = 5))
1
modelTree <- train(classe~., data = trainData, method = "rpart"
trcontrol = trainControl(method = "cv", number = 5))
modelTree <- train(classe~., data = trainData, method = "rpart",
trcontrol = trainControl(method = "cv", number = 5))
warnings()
modelTree <- train(classe~., data = trainData, method = "rpart",
trControl = trainControl(method = "cv", number = 5))
fancyRpartPlot(modelTree$finalModel)
modelTree$modelInfo
modelTree$metric
modelTree$finalModel
prediction <- predict(modelTree, newdata = testData)
conMat <- confusionMatrix(testData$classe, prediction)
conMat$table
conMat$overall
modelRF <- train(classe~., data = trainData, method = "rf",
trControl = trainControl(method = "cv", number = 5) )
prediction <- predict(modelRF, newdata = testData)
conMat <- confusionMatrix(testData$classe, prediction)
conMat$table
conMat$overall
plot(prediction)
print(modelRF)
plot(prediction)
plot(prediction)
plot(modelRF)
modelRF$finalModel
conMat$overall
conMat$byClass
modelRF$finalModel
names(modelRF$finalModel)
plot(modelRF$finalModel)
modelGbm <- train(classe~., data = trainData, method = "gbm",
trControl = trainControl(method = "cv", number = 5),
verbose=FALSE)
prediction <- predict(modelGbm, newdata = testData)
conMat <- confusionMatrix(testData$classe, prediction)
conMat$table
conMat$overall
prediction <- predict(modelRF, newdata = pmlTest2)
prediction
install.packages("shiny")
old.packages()
update.packages(ask = FALSE)
old.packages()
install.packages("mgcv")
install.packages("dplyr")
install.packages("dplyr")
install.packages("stringi")
install.packages("miniUI")l
install.packages("miniUI")
install.packages("leaflet")
shiny::runApp('MyWebApp')
library(leaflet)
getwd()
pmlTrain <- read.csv('pml-training.csv')
setwd('~/Documents')
library(caret)
library(rattle)
pmlTrain <- read.csv('pml-training.csv')
pmlTest <- read.csv('pml-testing.csv')
incolTrain <- which(colSums(is.na(pmlTrain)  | pmlTrain == "") >
dim(pmlTrain)[1]*.9)
incolTest <- which(colSums(is.na(pmlTest)  | pmlTest == "") >
dim(pmlTest)[1]*.9)
pmlTrain2 <- pmlTrain[, -incolTrain]
pmlTrain2 <- pmlTrain2[, -c(1:7)]
pmlTest2 <- pmlTest[, -incolTest]
pmlTest2 <- pmlTest2[, -c(1:7)]
set.seed(12345)
intrain <- createDataPartition(pmlTrain2$classe , p=0.75, list = FALSE)
trainData <- pmlTrain2[intrain, ]
testData <- pmlTrain2[-intrain, ]
dim(trainData)
dim(testData)
modelTree <- train(classe~., data = trainData, method = "rpart",
trControl = trainControl(method = "cv", number = 5))
fancyRpartPlot(modelTree$finalModel)
prediction <- predict(modelTree, newdata = testData)
conMat <- confusionMatrix(testData$classe, prediction)
conMat$table
conMat$overall
modelRF <- train(classe~., data = trainData, method = "rf",
trControl = trainControl(method = "cv", number = 5),
verbose=FALSE)
modelGbm <- train(classe~., data = trainData, method = "gbm",
trControl = trainControl(method = "cv", number = 5),
verbose=FALSE)
prediction <- predict(modelGbm, newdata = testData)
conMat <- confusionMatrix(testData$classe, prediction)
conMat$table
conMat$overall
unlink('file_cache', recursive = TRUE)
unlink('Pml_cache', recursive = TRUE)
library(leaflet)
my_map <- leaflet() %>%
addTiles() %>%
addMarkers(lat = 33.64714, lng = -117.839393,
popup = "Patrick's School")
my_map
library('plotly')
install.packages("plotly")
# Chunk 1
library(datasets)
head(mtcars, 3)
library(shiny)
runApp()
getwd()
setwd('~/MyShinyApp')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
